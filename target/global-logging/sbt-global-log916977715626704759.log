[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\rishe\AppData\Local\Temp\idea8.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\rishe\AppData\Local\Temp\idea8.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 1.8.0_202)
[debug]       Load.loadUnit: plugins took 95.8065ms
[debug]       Load.loadUnit: defsScala took 0.3391ms
[debug] [Loading] Scanning directory C:\Users\rishe\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\rishe\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 23.9329 ms
[debug]           Load.resolveProject(global-plugins) took 146.7815ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\rishe\.sbt\1.0\plugins, plugins: List(<none>))) took 196.659ms
[debug] [Loading] Done in C:\Users\rishe\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 224.3138ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2342ms
[debug]     Load.loadUnit(file:/C:/Users/rishe/.sbt/1.0/plugins/, ...) took 329.9896ms
[debug]   Load.apply: load took 484.4259ms
[debug]   Load.apply: resolveProjects took 5.682ms
[debug]   Load.apply: finalTransforms took 58.0874ms
[debug]   Load.apply: config.delegates took 9.8286ms
[debug]   Load.apply: Def.make(settings)... took 458.2622ms
[debug]   Load.apply: structureIndex took 114.4838ms
[debug]   Load.apply: mkStreams took 2.1477ms
[info] loading global plugins from C:\Users\rishe\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2562.1174ms
[debug]           Load.loadUnit: plugins took 23.3319ms
[debug]           Load.loadUnit: defsScala took 0.0039ms
[debug] [Loading] Scanning directory D:\Sensor_Statistics\SensorStatistics\project
[debug]             Load.loadUnit: mkEval took 9.8504ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Sensor_Statistics\SensorStatistics\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.7853 ms
[info] loading settings for project sensorstatistics-build from idea8.sbt ...
[debug]               Load.resolveProject(sensorstatistics-build) took 5.1915ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sensorstatistics-build, base: D:\Sensor_Statistics\SensorStatistics\project, plugins: List(<none>))) took 8.7005ms
[debug] [Loading] Done in D:\Sensor_Statistics\SensorStatistics\project, returning: (sensorstatistics-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 2766.5664ms
[debug]           Load.loadUnit: cleanEvalClasses took 4.5031ms
[debug]         Load.loadUnit(file:/D:/Sensor_Statistics/SensorStatistics/project/, ...) took 2795.3395ms
[debug]       Load.apply: load took 2796.7926ms
[debug]       Load.apply: resolveProjects took 0.1413ms
[debug]       Load.apply: finalTransforms took 14.8449ms
[debug]       Load.apply: config.delegates took 0.5623ms
[debug]       Load.apply: Def.make(settings)... took 121.2662ms
[debug]       Load.apply: structureIndex took 37.0387ms
[debug]       Load.apply: mkStreams took 0.0034ms
[info] loading project definition from D:\Sensor_Statistics\SensorStatistics\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4579.3683ms
[debug]     Load.loadUnit: defsScala took 0.0032ms
[debug] [Loading] Scanning directory D:\Sensor_Statistics\SensorStatistics
[debug]       Load.loadUnit: mkEval took 0.246ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Sensor_Statistics\SensorStatistics, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.6594 ms
[info] loading settings for project sensorstatistics from build.sbt ...
[debug]         Load.resolveProject(sensorstatistics) took 37.0748ms
[debug]       Load.loadTransitive: finalizeProject(Project(id sensorstatistics, base: D:\Sensor_Statistics\SensorStatistics, plugins: List(<none>))) took 41.4951ms
[debug] [Loading] Done in D:\Sensor_Statistics\SensorStatistics, returning: (sensorstatistics)
[debug]     Load.loadUnit: loadedProjectsRaw took 1489.4887ms
[debug]     Load.loadUnit: cleanEvalClasses took 12.0448ms
[debug]   Load.loadUnit(file:/D:/Sensor_Statistics/SensorStatistics/, ...) took 6081.7223ms
[debug] Load.apply: load took 6083.3352ms
[debug] Load.apply: resolveProjects took 0.1686ms
[debug] Load.apply: finalTransforms took 30.1088ms
[debug] Load.apply: config.delegates took 0.2632ms
[debug] Load.apply: Def.make(settings)... took 129.2875ms
[debug] Load.apply: structureIndex took 21.1632ms
[debug] Load.apply: mkStreams took 0.003ms
[info] set current project to SensorStatistics (in build file:/D:/Sensor_Statistics/SensorStatistics/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 53140 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 53140, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SensorStatistics (in build file:/D:/Sensor_Statistics/SensorStatistics/)
[debug] > Exec(idea-shell, None, None)
